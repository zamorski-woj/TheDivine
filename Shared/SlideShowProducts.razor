@using System.Threading


<div class="slideshow">
    <div class="picture-with-arrows">
        @if (images.Length > 1)
        {
            <span class="oi oi-chevron-left" aria-hidden="true" style="font-size:2rem;" @onclick="() => Manualy(true)">
            </span>
        }
        <div class="main-image">
            <img style="border-radius:0.5rem; " src="@images[currentPosition]" @onclick="() => MaximiseImage(images[currentPosition])" />
        </div>
        @if (images.Length > 1)
        {
            <span class="oi oi-chevron-right" aria-hidden="true" style="font-size:2rem;" @onclick="() => Manualy(false)">
            </span>
        }
    </div>

    @if (images.Length > 1)
        {
    <div class="miniature-row">
        
            @foreach (var item in images)
            {
                if (Math.Abs(currentPosition % images.Length) == Array.IndexOf(images, item))
                {
                    <div class="miniature-frame" style="border-color: #c29521;" @onclick="() => Manualy(Array.IndexOf(images, item))">

                        <img src="@images[Array.IndexOf(images, item)]" class="miniature" style="opacity:100%;" />

                    </div>
                }
                else
                {
                    <div class="miniature-frame" @onclick="() => Manualy(Array.IndexOf(images, item))">

                        <img src="@ProductList.Miniatures(images[Array.IndexOf(images, item)])" class="miniature" />

                    </div>
                }
            }
        
    </div>
    }
</div>


@if (maximised)
{
    <ImageFull @bind-chosenImage=@maximisedImage @bind-ifMaximised=@maximised />
}


@code {
    [Parameter]
    public string[] images { get; set; }
    //public bool autoWalkthrough = true;
    int currentPosition;
    CancellationTokenSource cts;
    CancellationToken ct;
    string maximisedImage = "";
    bool maximised = false;


    public void Manualy(bool backwards)
    {
        if (!cts.IsCancellationRequested)
        {
            cts.Cancel();
        }
        if (backwards)
        {
            currentPosition--;
        }
        else
        {
            currentPosition++;
        }

        CorrectCurrentPosition();
        ChooseImage(images[currentPosition]);
        cts.Cancel(false);
    }

    public void Manualy(int position)
    {
        currentPosition = position;
        CorrectCurrentPosition();
        ChooseImage(images[currentPosition]);
        cts.Cancel(false);
    }



    protected override async Task OnInitializedAsync()
    {
        cts = new CancellationTokenSource();
        ct = cts.Token;
        /*if (autoWalkthrough)
        {
            //  Walkthrough();
        }*/
        await Task.Yield();

    }

    /* public async Task Walkthrough()
     {
         while (!ct.IsCancellationRequested)
         {
             await Task.Delay(4000, ct);
             currentPosition++;
             CorrectCurrentPosition();
             await InvokeAsync(() => this.StateHasChanged());
         }
     }*/

    private void CorrectCurrentPosition()
    {
        if (currentPosition >= images.Length)
        {
            currentPosition -= images.Length;
        }
        if (currentPosition < 0)
        {
            currentPosition = images.Length - 1;
        }
    }

    void MaximiseImage(string obrazek)
    {
        maximisedImage = obrazek;
        maximised = true;
    }


    void ChooseImage(string obrazek)
    {
        maximisedImage = obrazek;
        maximised = false;
    }
}
